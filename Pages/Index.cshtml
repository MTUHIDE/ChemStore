@page
@model ChemStoreWebApp.Pages.SearchModel
@using ChemStoreWebApp.Utilities

@{
    ViewData["Title"] = "Home Page";
}

<head>
    <link rel="stylesheet" href="\css\searchItemLayout.css" asp-append-version="true" />

    <!--Links to add Roboto font for modal buttons as per Figma (and because Roboto is a nice font-->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <!---------------------------------------------------------------------------------------------->
</head>

<div id="search">
    <div class="search">
        
        <form id="filterForm">
            <div class="s">
                <input type="text" class="inputPlaceholder" placeholder=Chemical Name" />
            </div>
            <div class="s">
                <input type="text" class="inputPlaceholder" placeholder="CAS Number" asp-for="searchCAS" />
            </div>
            <div class="s">
                <input type="email" class="inputPlaceholder" placeholder="PI email" asp-for="searchEmail"/>
            </div>
            <div class="s">
                <input type="text" class="inputPlaceholder" placeholder="Hazard" />
            </div>
            <div class="s">
                <select asp-for="searchBuilding" asp-items="Html.GetEnumSelectList<Buildings>()" id="selectBuilding" class="rounded-dropdown inputPlaceholder">
                    <option value="" selected disabled>Building</option>
                </select>
            </div>
            <div class="s">
                <input type="number" class="inputPlaceholder" placeholder="Room Number" />
            </div>
            <div class="s">
                <input type="number" asp-for="searchSize" class="inputPlaceholder" placeholder="Container Size" />
            </div>
            <div class="s">
                <select asp-for="searchUnits" asp-items="Html.GetEnumSelectList<Units>()">
                    <option value="" selected disabled>Units</option>
                </select>
            </div>
            <input type="reset" value="Clear" class="filter" /> &nbsp;
            <input type="submit" value="Filter" class="filter" />
        </form>
    </div>
</div>


<div id="toggleFilterContainer">
    <button class="openFilter" id="toggleFilter" onclick="toggleFilter()">
        <
    </button>
</div>


<div id="results" class="results">
    <form method="post" id="deleteForm">
        <table class="table">
            <thead>
            </thead>
            <tbody>
                @if (Model.DisplayContainers.Count() > 0)
                {
                    var count = Model.DisplayContainers.Count();
                    var start = 0;
                    var end = 25;
                    var numOfPages = Model.DisplayContainers.Count() / 25;

                    @if (!Model.textEntered())
                    {
                        /*<p class="noFilters">No Filters Applied</p>*/
                    }


                    if (count < end) { end = count; }

                <tr>
                    <td>
                        Chemical Name
                        <button type="submit" class="blankImgButton" form="filterForm" name="sortMethod" class="btn tableButton" value="0">
                            <img src="@((Model.prevSort == 0) ? "assets/upTableSort.png" :
                                        (Model.prevSort == 1) ? "assets/downTableSort.png" : "assets/neutralTableSort.png")" class="img tableSort" id="buttonImg">
                        </button>
                        <!--<button type="submit" form="filterForm" name="sortMethod" class="btn tableButton" value="0"> Chemical Name </button> -->
                        <input name="prevSort" form="filterForm" asp-for="prevSort" type="number" value="@Model.prevSort" hidden>
                        <!--<button type="submit" form="filterForm" name="sortMethod" class="searchPageBtns regBtn" value="4"> Dep </button> -->
                    </td>
                    <td>
                        CAS Number
                        <button type="submit" class="blankImgButton" form="filterForm" name="sortMethod" class="btn tableButton" value="2">
                            <img src="@((Model.prevSort == 2) ? "assets/upTableSort.png" :
                                        (Model.prevSort == 3) ? "assets/downTableSort.png" : "assets/neutralTableSort.png")" class="img tableSort" id="buttonImg">
                        </button>
                    </td>
                    <td>Hazard</td>
                    <td>
                        Size
                        <button type="submit" class="blankImgButton" form="filterForm" name="revNums" class="btn tableButton" value="true">
                            <img src="@((Model.revNumsPrev == true) ? "assets/downTableSort.png" : "assets/upTableSort.png")" class="img tableSort" id="buttonImg">
                        </button>
                        <input name="revNumsPrev" form="filterForm" asp-for="revNumsPrev" type="text" value="@Model.revNumsPrev" hidden>
                    </td>
                </tr>
                    @for (var i = start; i < end; i++)
                    {
                        var item = Model.DisplayContainers[i];
                        <tr class="expandable">
                            <td class="a">
                                @Html.DisplayFor(modelItem => item.chem.ChemicalName)
                            </td>
                            <td class="a">
                                @Html.DisplayFor(modelItem => item.chem.CasNumber)
                            </td>
                            <td class="a">
                                @*TODO: actually implement conditional rendering based on data*@
                                <span class="hazards">
                                    @if (i % 4 == 0)
                                    {
                                        <span class="hazard hazard-exclamation"></span>
                                        <span class="hazard hazard-skull"></span>
                                        <span class="hazard hazard-gas"></span>
                                        <span class="hazard hazard-environment"></span>
                                        <span class="hazard hazard-bomb"></span>
                                        <span class="hazard hazard-corrosion"></span>
                                    }
                                    else if (i % 4 == 1)
                                    {
                                        <span class="hazard hazard-bomb"></span>
                                        <span class="hazard hazard-corrosion"></span>
                                    }
                                    else if (i % 4 == 2)
                                    {
                                        <span class="hazard hazard-bomb"></span>
                                        <span class="hazard hazard-flame"></span>
                                        <span class="hazard hazard-corrosion"></span>
                                    }
                                    else if (i % 4 == 3)
                                    {
                                        <span class="hazard hazard-skull"></span>
                                        <span class="hazard hazard-bomb"></span>
                                        <span class="hazard hazard-flame"></span>
                                        <span class="hazard hazard-corrosion"></span>
                                    }
                                </span>
                            </td>
                            <td class="a">
                                @Html.DisplayFor(modelItem => item.con.Amount)
                                @EnumHelper.GetDisplayValue((Units)item.con.Unit)
                            </td>
                            <td class="a">
                                <button type="button" class="blankImgButton" name="editTableBtn" data-toggle="modal" data-target="#edit-modal" onclick="getEditModal(@item.con.ContainerId)">
                                    <img src="assets\edit_symbol.png" class="img edit" id="buttonImg" style="width: 15px">
                                </button>
                                <input name="chemicalsToDelete" type="checkbox" onchange="toggleDeleteButton()" onclick="event.stopPropagation()" value="@item.con.ContainerId" style="display: none">
                            </td>
                        </tr>
                        <tr class="moreInformation">
                            <td class="building">
                                @EnumHelper.GetDisplayValue((Buildings)item.loc.BuildingName)
                                @Html.DisplayFor(modelItem => item.loc.RoomNumber)
                            </td>
                            <td class="dpt">
                                @EnumHelper.GetDisplayValue((Departments)item.supervisor.Department) <!--Displayed department for testing, you can remove if not needed-->
                            </td>
                            <td class="b">
                                <a asp-page="Admin/Chemicals/Details" asp-route-id="@item.chem.CasNumber">More Details</a>
                            </td>
                            <td class="b">
                                <a asp-page="Admin/Hazards/Details" asp-route-id="@item.chem.ChemicalHazards">Safety Data Sheet</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <p>No results found</p>
                }
            </tbody>
        </table>
    </form>

    <div class="pageSelectors">
        <!--<a href=""> << </a>
    <a href=""> < </a>-->
        @for (var i = 1; i <= Model.DisplayContainers.Count() / 25 + 1; i++)
        {
            <a href=""> @i.ToString()  </a>
        }

        <a href=""> > </a>
        <a href=""> >> </a>
        <div style="margin-left: auto">
            <div id="regularDiv">
                <button type="button" class="searchPageBtns greenBtn" id="addChemicalBtn" data-toggle="modal" data-target="#add-modal" onclick="getAddModal()">
                    Add
                </button>
                <button type="button" class="searchPageBtns redBtn" style="pointer-events: @((Model.DisplayContainers.Count() == 0) ? " none" : "initial" )" id="initiateDelBtn" onclick="deleteModeOn()" disabled="@((Model.DisplayContainers.Count() == 0) ? " disabled" : null)">
                    Remove
                </button>
            </div>
            <div id="deleteDiv" style="display: none">
                <!-- Button trigger for modal -->
                <button type="button" class="searchPageBtns redBtn" id="delModalBtn" style="pointer-events: none;" data-toggle="modal" data-target="#confirmatioinModal" disabled>
                    Delete
                </button>
                <button type="button" class="searchPageBtns regBtn" onclick="deleteModeOff()" id="cancelDelBtn">
                    Cancel
                </button>
            </div>
        </div>
     </div>
</div>

            <!--New Create Modal HTML-->

            <div class="modal fade" tabindex="-1" role="dialog" id="add-modal">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add New Container</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" id="add-modal-body"></div>
                    </div>
                </div>
            </div>

            <!--New Edit Modal HTML-->

            <div class="modal fade" tabindex="-1" role="dialog" id="edit-modal">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Container</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" id="edit-modal-body"></div>
                    </div>
                </div>
            </div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmatioinModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="justify-content:center;">
                <h5 class="modal-title" style="font-size: 30px" id="modalLabel">Are You Sure?</h5>
                <button type="button" class="close" style="position: absolute; right: 15px; width: 20%;" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" style="text-align: center">
                <button type="button" class="btn modalBtns redBtn" data-dismiss="modal">Close</button>
                <button type="submit" class="btn modalBtns greenBtn" id="DelButton" form="deleteForm" asp-page-handler="delete">
                    Yes
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    function clearForm($form) {
        $form.find(':input').not(':button, :submit, :reset, :hidden, :checkbox, :radio').val('');
        $form.find(':checkbox, :radio').prop('checked', false);
    }
    function getRoomsOfBuilding() {
        var ex = document.getElementById('BuildingIndex');
        var str = ex.options[ex.selectedIndex].value;
        document.getElementById('RoomIndex').innerHTML = "<option disabled selected hidden value=''>Room Number</option>";
        fetch(`?handler=SubCategories&buildingIndex=${str}`)
            .then((response) => {
                return response.json();
            })
            .then((data) => {
                Array.prototype.forEach.call(data, function (item, i) {
                    console.log('item', item)
                    document.getElementById('RoomIndex').innerHTML += `<option value="${item.roomNumber}">${item.roomNumber}</option>`
                });
            });
    }

    function getEditRoomsOfBuilding(initGet) {
        var ex = document.getElementById('BuildingIndex');
        var str = ex.options[ex.selectedIndex].value;
        var currRoomNumber = document.getElementById('RoomIndex').value;
        fetch(`?handler=EditCategories&buildingEditIndex=${str}`)
            .then((response) => {
                return response.json();
            })
            .then((data) => {
                if (initGet == 0) {
                    document.getElementById('RoomIndex').innerHTML = `<option selected hidden value="${currRoomNumber}">${currRoomNumber}</option>`;
                } else {
                    document.getElementById('RoomIndex').innerHTML = "<option disabled selected hidden value=''>Room Number</option>";
                }
                Array.prototype.forEach.call(data, function (item, i) {
                    document.getElementById('RoomIndex').innerHTML += `<option value="${item.roomNumber}">${item.roomNumber}</option>`
                });
            });
    }
    function getEditModal(id) {
        fetch(`?handler=EditModal&conid=${id}`)
            .then((response) => {
                return response.text();
            })
            .then((result) => {
                $('#edit-modal-body').html(result)
                getEditRoomsOfBuilding(0);
            });
    }

    function getAddModal() {
        fetch(`?handler=AddModal`)
            .then((response) => {
                return response.text();
            })
            .then((result) => {
                $('#add-modal-body').html(result)
                getRoomsOfBuilding();
            });
    }
</script>

<script>
    function showCreateAlert() {
        var hasError = @Model.createError.ToString().ToLower();
        if (hasError) {
            window.alert('Error: Invalid Data');
        }

    }
</script>

<script>
    //Enables or disables the delete button
    function toggleDeleteButton() {
        var checkboxes = document.getElementsByName('chemicalsToDelete'); //All the checkboxes on the chemicals
        var sendbtn = document.getElementById('delModalBtn');

        //Searches for checked box
        var checkedOne = Array.prototype.slice.call(checkboxes).some(x => x.checked);

        sendbtn.style.pointerEvents = checkedOne ? "initial" : "none";
        sendbtn.disabled = checkedOne ? false : true;
    }

    //Replaces edit image buttons with checkboxes to delete containers and changes buttons to cancel and delete
    function deleteModeOn() {
        //Hides the edit image buttons
        var editBtns = document.getElementsByName('editTableBtn');
        editBtns.forEach((val, index) => editBtns[index].style.display = "none");

        //Displays the checkboxes
        var checkboxes = document.getElementsByName('chemicalsToDelete');
        checkboxes.forEach((val, index) => checkboxes[index].style.display = "initial");

        //Changes the buttons
        var deleteDiv = document.getElementById('deleteDiv');
        deleteDiv.style.display = "initial";
        var regularDiv = document.getElementById('regularDiv');
        regularDiv.style.display = "none";
    }

    //Replaces checkboxes with edit image buttons to edit containers and changes buttons to remove and add
    function deleteModeOff() {
        //Hides and deselects the checkboxes
        var checkboxes = document.getElementsByName('chemicalsToDelete');
        checkboxes.forEach((val, index) => {
            checkboxes[index].style.display = "none";
            checkboxes[index].checked = false;
        });

        //Shows edit image buttons
        var editBtns = document.getElementsByName('editTableBtn');
        editBtns.forEach((val, index) => editBtns[index].style.display = "initial");

        //Changes buttons shown
        var deleteDiv = document.getElementById('deleteDiv');
        deleteDiv.style.display = "none";
        var regularDiv = document.getElementById('regularDiv');
        regularDiv.style.display = "initial";

        var sendbtn = document.getElementById('delModalBtn');
        sendbtn.disabled = true;
    }

</script>

<script>
    // Opens and closes the filter sections
    function closeFilter() {
        document.getElementById("search").style.display = "none";
        document.getElementById("openFilter").style.display = "block";
        document.getElementById("closeFilter").style.display = "none";
    }
    function openFilter() {
        document.getElementById("search").style.display = "block";
        document.getElementById("openFilter").style.display = "none";
        document.getElementById("closeFilter").style.display = "block";
    }

    function toggleFilter() {
        if (document.getElementById("search").style.display === "none") {
            // open filter
            document.getElementById("search").style.display = "block";
            document.getElementById("toggleFilter").innerHTML = "<";
        } else {
            // close filter
            document.getElementById("search").style.display = "none";
            document.getElementById("toggleFilter").innerHTML = ">";
        }
    }
</script>
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
</script>
<script>
    var coll = document.getElementsByClassName("expandable");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
                this.style.backgroundColor = "rgb(225,225,225)";
            } else {
                content.style.display = "block";
                this.style.backgroundColor = "rgb(204,204,204)";
            }
        });
    }
</script>

<script>
    // The script to control the location filter selection
    var dropdown = document.getElementsByClassName("location-dropdown");
    var i;

    for (i = 0; i < dropdown.length; i++) {
        dropdown[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var dropdownContent = this.nextElementSibling;
            if (dropdownContent.style.display === "block") {
                dropdownContent.style.display = "none";
            } else {
                dropdownContent.style.display = "block";
            }
        });
    }
</script>

<script>
    // The script to control the container filter selection
    var dropdown = document.getElementsByClassName("container-dropdown");
    var i;

    for (i = 0; i < dropdown.length; i++) {
        dropdown[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var dropdownContent = this.nextElementSibling;
            if (dropdownContent.style.display === "block") {
                dropdownContent.style.display = "none";
            } else {
                dropdownContent.style.display = "block";
            }
        });
    }
</script>
