// <auto-generated />
using System;
using ChemStoreWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChemStoreWebApp.Migrations
{
    [DbContext(typeof(chemstoreContext))]
    [Migration("20240322171523_aadaw")]
    partial class aadaw
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChemStoreWebApp.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Supervisor")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Chemical", b =>
                {
                    b.Property<string>("CasNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChemicalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CasNumber");

                    b.ToTable("Chemical");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.ChemicalHazards", b =>
                {
                    b.Property<int>("IDChemicalHazard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDChemicalHazard"), 1L, 1);

                    b.Property<string>("CasNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CasNumberNavigationCasNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HazardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDChemicalHazard");

                    b.HasIndex("CasNumberNavigationCasNumber");

                    b.HasIndex("HazardId");

                    b.ToTable("ChemicalHazards");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Container", b =>
                {
                    b.Property<long>("ContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContainerId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CasNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CasNumberNavigationCasNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Retired")
                        .HasColumnType("bit");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("ContainerId");

                    b.HasIndex("CasNumberNavigationCasNumber");

                    b.HasIndex("RoomId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.ContainerChemicals", b =>
                {
                    b.Property<long>("ChemicalID")
                        .HasColumnType("bigint");

                    b.Property<int>("ContainerID")
                        .HasColumnType("int");

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreferredUnit")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("StateOfMatter")
                        .HasColumnType("int");

                    b.HasKey("ChemicalID", "ContainerID");

                    b.HasIndex("ContainerID");

                    b.ToTable("ContainerChemicals");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Hazard", b =>
                {
                    b.Property<string>("HazardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HazardId");

                    b.ToTable("Hazard");

                    b.HasData(
                        new
                        {
                            HazardId = "Corrosion",
                            Description = "Corrosive"
                        },
                        new
                        {
                            HazardId = "Environment",
                            Description = "Enviornmental Hazard"
                        },
                        new
                        {
                            HazardId = "ExclamationMark",
                            Description = "Exclamation Mark"
                        },
                        new
                        {
                            HazardId = "ExplodingBomb",
                            Description = "Exploding Bomb"
                        },
                        new
                        {
                            HazardId = "FlameOverCircle",
                            Description = "Flame Over Circle"
                        },
                        new
                        {
                            HazardId = "Flame",
                            Description = "Flame"
                        },
                        new
                        {
                            HazardId = "GasCylinder",
                            Description = "Gas Cylinder"
                        },
                        new
                        {
                            HazardId = "HealthHazard",
                            Description = "HealthHazard"
                        },
                        new
                        {
                            HazardId = "Skull",
                            Description = "Skull"
                        });
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HazardPictogram", b =>
                {
                    b.Property<string>("GHCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pictogram")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GHCode");

                    b.ToTable("HazardPictogram");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HazardPrecaution", b =>
                {
                    b.Property<string>("HCode")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PCode")
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("HCode", "PCode");

                    b.ToTable("HazardPrecaution");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HazardStatement", b =>
                {
                    b.Property<string>("HCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("SignalWord")
                        .HasColumnType("int");

                    b.Property<string>("Statements")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HCode");

                    b.ToTable("HazardStatement");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Location", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BuildingName")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.LocationAttribute", b =>
                {
                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID", "Key");

                    b.ToTable("LocationAttribute");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Log", b =>
                {
                    b.Property<int>("IDLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDLog"), 1L, 1);

                    b.Property<int?>("Action")
                        .HasColumnType("int");

                    b.Property<long?>("ContainerID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDLog");

                    b.HasIndex("UserID");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.OverridePermissions", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<bool>("HasPermission")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "LocationID", "Permission");

                    b.HasIndex("LocationID");

                    b.ToTable("OverridePermissions");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.PrecautionaryStatement", b =>
                {
                    b.Property<string>("PCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Statement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PCode");

                    b.ToTable("PrecautionaryStatement");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.RolePermissions", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<bool>("HasPermission")
                        .HasColumnType("bit");

                    b.HasKey("RoleID", "LocationID", "Permission");

                    b.HasIndex("LocationID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.StatementPictogram", b =>
                {
                    b.Property<string>("GHCode")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("HCode")
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("GHCode", "HCode");

                    b.HasIndex("HCode");

                    b.ToTable("StatementPictogram");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Chemical", b =>
                {
                    b.Property<long>("ChemicalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ChemicalID"), 1L, 1);

                    b.Property<int>("Cas_Num")
                        .HasColumnType("int");

                    b.Property<string>("H_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("ChemicalID");

                    b.HasIndex("H_Code");

                    b.ToTable("X_Chemical");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Container", b =>
                {
                    b.Property<int>("ContainerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContainerID"), 1L, 1);

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.HasKey("ContainerID");

                    b.HasIndex("LocationID");

                    b.ToTable("X_Container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ParentID");

                    b.ToTable("X_Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Log", b =>
                {
                    b.Property<long>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogID"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("Key1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("X_Log");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.ChemicalHazards", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Chemical", "CasNumberNavigation")
                        .WithMany("ChemicalHazards")
                        .HasForeignKey("CasNumberNavigationCasNumber");

                    b.HasOne("ChemStoreWebApp.Models.Hazard", "Hazard")
                        .WithMany("ChemicalHazards")
                        .HasForeignKey("HazardId");

                    b.Navigation("CasNumberNavigation");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Container", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Chemical", "CasNumberNavigation")
                        .WithMany("Container")
                        .HasForeignKey("CasNumberNavigationCasNumber");

                    b.HasOne("ChemStoreWebApp.Models.Location", "Room")
                        .WithMany("Container")
                        .HasForeignKey("RoomId");

                    b.HasOne("ChemStoreWebApp.Models.Account", "Supervisor")
                        .WithMany("Container")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasNumberNavigation");

                    b.Navigation("Room");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.ContainerChemicals", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.X_Container", "X_Container")
                        .WithMany()
                        .HasForeignKey("ContainerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("X_Container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HazardPrecaution", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HazardStatement", "HazardStatement")
                        .WithMany()
                        .HasForeignKey("HCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HazardStatement");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.LocationAttribute", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.X_Location", "X_Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("X_Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Log", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.OverridePermissions", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.X_Location", "X_Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemStoreWebApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("X_Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.RolePermissions", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.X_Location", "X_Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemStoreWebApp.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("X_Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.StatementPictogram", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HazardPictogram", "HazardPictogram")
                        .WithMany()
                        .HasForeignKey("GHCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemStoreWebApp.Models.HazardStatement", "HazardStatement")
                        .WithMany()
                        .HasForeignKey("HCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HazardPictogram");

                    b.Navigation("HazardStatement");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.User", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("ChemStoreWebApp.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Chemical", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HazardStatement", "HazardStatement")
                        .WithMany()
                        .HasForeignKey("H_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HazardStatement");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Container", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.X_Location", "X_Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("X_Location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Location", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChemStoreWebApp.Models.X_Location", "X_Location_2")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("X_Location_2");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.X_Log", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Account", b =>
                {
                    b.Navigation("Container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Chemical", b =>
                {
                    b.Navigation("ChemicalHazards");

                    b.Navigation("Container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Hazard", b =>
                {
                    b.Navigation("ChemicalHazards");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Location", b =>
                {
                    b.Navigation("Container");
                });
#pragma warning restore 612, 618
        }
    }
}
