// <auto-generated />
using System;
using ChemStoreWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChemStoreWebApp.Migrations
{
    [DbContext(typeof(chemstoreContext))]
    [Migration("20210131205937_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChemStoreWebApp.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("building_id")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .HasColumnName("building_name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("BuildingId");

                    b.ToTable("building");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.ChemInContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("chem_in_container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Chemical", b =>
                {
                    b.Property<int>("CasNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cas_number")
                        .HasColumnType("int");

                    b.Property<string>("ChemName")
                        .HasColumnName("chem_name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int?>("HazardId")
                        .HasColumnName("hazard_id")
                        .HasColumnType("int");

                    b.HasKey("CasNumber")
                        .HasName("PRIMARY_CAS");

                    b.ToTable("chemical");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Container", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnName("container_id")
                        .HasColumnType("int");

                    b.Property<int?>("ChemId")
                        .HasColumnName("chem_id")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<double?>("Size")
                        .HasColumnName("size")
                        .HasColumnType("double");

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("ContainerId");

                    b.ToTable("container");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HasHazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("ChemicalId")
                        .HasColumnName("chemical_id")
                        .HasColumnType("int");

                    b.Property<int?>("HazardId")
                        .HasColumnName("hazard_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChemicalId")
                        .HasName("chemical_id_idx");

                    b.HasIndex("HazardId")
                        .HasName("hazard_id_idx");

                    b.ToTable("has_hazard");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HasLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("has_location");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Hazard", b =>
                {
                    b.Property<int>("HazardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hazard_id")
                        .HasColumnType("int");

                    b.Property<string>("HazardDetails")
                        .HasColumnName("hazard_details")
                        .HasColumnType("varchar(255)");

                    b.HasKey("HazardId");

                    b.ToTable("hazard");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int?>("Building")
                        .HasColumnName("building")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnName("department")
                        .HasColumnType("int");

                    b.Property<int>("LocationFid")
                        .HasColumnName("location_fid")
                        .HasColumnType("int");

                    b.Property<int?>("Room")
                        .HasColumnName("room")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationFid")
                        .HasName("location_fid_idx");

                    b.ToTable("location");

                    b.HasComment("Currently stores the location explicitly, not the foreign keys of each respective table.");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.PersonInCharge", b =>
                {
                    b.Property<int>("PicId")
                        .HasColumnName("pic_id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("PicName")
                        .HasColumnName("pic_name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("PicId")
                        .HasName("PRIMARY_ID");

                    b.ToTable("person_in_charge");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Container", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HasLocation", "ContainerNavigation")
                        .WithOne("Container")
                        .HasForeignKey("ChemStoreWebApp.Models.Container", "ContainerId")
                        .HasConstraintName("container_id")
                        .IsRequired();
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.HasHazard", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.Chemical", "Chemical")
                        .WithMany("HasHazard")
                        .HasForeignKey("ChemicalId")
                        .HasConstraintName("chemical_id");

                    b.HasOne("ChemStoreWebApp.Models.Hazard", "Hazard")
                        .WithMany("HasHazard")
                        .HasForeignKey("HazardId")
                        .HasConstraintName("hazard_id");
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.Location", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HasLocation", "LocationF")
                        .WithMany("Location")
                        .HasForeignKey("LocationFid")
                        .HasConstraintName("location_fid")
                        .IsRequired();
                });

            modelBuilder.Entity("ChemStoreWebApp.Models.PersonInCharge", b =>
                {
                    b.HasOne("ChemStoreWebApp.Models.HasLocation", "Pic")
                        .WithOne("PersonInCharge")
                        .HasForeignKey("ChemStoreWebApp.Models.PersonInCharge", "PicId")
                        .HasConstraintName("pic_id")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
